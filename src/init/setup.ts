import inquirer from 'inquirer';
import chalk from 'chalk';
import fs from 'fs/promises';
import path from 'path';

export async function initProject(options: any): Promise<void> {
  let posthogKey = options.key;

  if (!posthogKey && !options.skipSetup) {
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'posthogKey',
        message: 'PostHog API key (get free key at posthog.com):',
        validate: (input) => input.length > 10 || 'Please enter a valid PostHog key'
      },
      {
        type: 'confirm',
        name: 'setupReferrals',
        message: 'Set up referral system?',
        default: true
      },
      {
        type: 'confirm',
        name: 'setupAbTesting',
        message: 'Set up A/B testing?',
        default: true
      }
    ]);

    posthogKey = answers.posthogKey;
  }

  // Generate SDK files
  await generateAutotrackSDK(posthogKey);
  await generateEventsConfig();
  await generateDashboardConfig();

  console.log(chalk.green('ðŸ“Š SDK generated! Add this to your app:'));
  console.log(chalk.cyan(`
import { initGrowthOS } from './growthos/sdk';

initGrowthOS('${posthogKey}');
  `));

  console.log(chalk.yellow('\nðŸŽ¯ Next steps:'));
  console.log('1. Deploy your app');
  console.log('2. Visit your PostHog dashboard');
  console.log('3. Run: npx growthos audit username/repo --share');
}

async function generateAutotrackSDK(apiKey: string): Promise<void> {
  const sdkCode = `// Generated by GrowthOS - Anti-vanity metrics SDK
import posthog from 'posthog-js';

// Rejected vanity metrics - we focus on business KPIs only
const VANITY_METRICS = [
  'page_view',
  'total_sessions',
  'bounce_rate',
  'time_on_site',
  'scroll_depth'
];

export const initGrowthOS = (apiKey: string = '${apiKey}') => {
  posthog.init(apiKey, {
    api_host: 'https://eu.posthog.com',
    capture_pageview: false, // We control what gets tracked
    autocapture: false // No noise
  });

  // Auto-track critical business events only
  trackBusinessEvents();

  return {
    track: (event: string, properties?: any) => {
      if (VANITY_METRICS.includes(event)) {
        console.warn(\`GrowthOS: Rejected vanity metric "\${event}"\`);
        return;
      }
      posthog.capture(event, properties);
    },

    // A/B testing helper
    getVariant: (experimentKey: string) => {
      return posthog.getFeatureFlag(experimentKey);
    },

    // Referral tracking
    trackReferral: (code: string) => {
      posthog.capture('referral_click', { referral_code: code });
    }
  };
};

function trackBusinessEvents() {
  // Auto-track form submissions (signups)
  document.addEventListener('submit', (e) => {
    const form = e.target as HTMLFormElement;
    if (form.action.includes('signup') || form.id.includes('signup')) {
      posthog.capture('signup_attempt');
    }
  });

  // Auto-track CTA clicks
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (target.tagName === 'BUTTON' || target.classList.contains('cta')) {
      posthog.capture('cta_click', {
        text: target.textContent,
        position: target.getBoundingClientRect()
      });
    }
  });

  // Track page navigation (business-relevant only)
  let currentPath = window.location.pathname;
  const businessPages = ['/dashboard', '/pricing', '/checkout', '/onboarding'];

  if (businessPages.some(page => currentPath.includes(page))) {
    posthog.capture('page_view_business', { page: currentPath });
  }
}

// Export for manual tracking
export const growthos = {
  track: (event: string, properties?: any) => posthog.capture(event, properties),
  identify: (userId: string, traits?: any) => posthog.identify(userId, traits)
};`;

  await fs.mkdir('growthos', { recursive: true });
  await fs.writeFile('growthos/sdk.js', sdkCode);

  console.log(chalk.green('âœ… Anti-vanity SDK generated'));
}

async function generateEventsConfig(): Promise<void> {
  const eventsYaml = `# GrowthOS Events Schema - Business KPIs only
# Auto-generated - edit carefully

events:
  # Authentication & Onboarding
  - name: user_signup
    description: User completed registration
    properties:
      source: string # organic, referral, ads
      plan: string # free, starter, pro

  - name: onboarding_completed
    description: User finished onboarding flow
    properties:
      steps_completed: number
      time_to_complete: number

  # Revenue Events
  - name: subscription_created
    description: User started paid subscription
    properties:
      plan: string
      amount: number
      currency: string

  - name: payment_completed
    description: Successful payment processed
    properties:
      amount: number
      currency: string
      product: string

  # Growth Events
  - name: referral_sent
    description: User sent referral invite
    properties:
      channel: string # email, social, link
      recipient_count: number

  - name: feature_activated
    description: User used key feature for first time
    properties:
      feature_name: string
      time_to_activation: number

# Rejected vanity metrics (auto-dropped):
# - page_view
# - total_sessions
# - bounce_rate
# - time_on_site
# - scroll_depth`;

  await fs.writeFile('growthos/events.yaml', eventsYaml);
  console.log(chalk.green('âœ… Events schema generated'));
}

async function generateDashboardConfig(): Promise<void> {
  const dashboardConfig = `{
  "name": "GrowthOS Dashboard",
  "description": "Pre-built growth metrics - no vanity allowed",
  "dashboards": [
    {
      "name": "Activation Funnel",
      "metrics": [
        "signup_to_onboarding_rate",
        "onboarding_completion_rate",
        "time_to_first_value"
      ]
    },
    {
      "name": "Revenue Metrics",
      "metrics": [
        "trial_to_paid_conversion",
        "monthly_recurring_revenue",
        "customer_lifetime_value"
      ]
    },
    {
      "name": "Growth Loops",
      "metrics": [
        "referral_conversion_rate",
        "viral_coefficient",
        "organic_vs_referred_signups"
      ]
    }
  ],
  "alerts": [
    {
      "name": "Activation Drop",
      "condition": "signup_to_onboarding_rate < 0.7",
      "action": "slack_ping"
    }
  ]
}`;

  await fs.writeFile('growthos/dashboard.json', dashboardConfig);
  console.log(chalk.green('âœ… Dashboard config generated'));
}